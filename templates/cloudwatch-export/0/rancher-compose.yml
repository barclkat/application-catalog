.catalog:
  name: Cloudwatch Exporter
  version: 1.0-rancher0
  uuid: cloudwatch-export-0
  description: |
    Collects & Exports Cloudwatch metrics to InfluxDB
  questions:
    - variable: "image"
      label: "Telegraf Image"
      default: "telegraf:0.13.0"
      description: "The Telegraf Docker container to run"
      required: true
    - variable: "aws_region"
      label: "AWS Region"
      description: "AWS Region to acquire Cloudwatch metrics"
      required: true
      default: "us-east-1"
    - variable: "aws_access_key"
      label: "AWS Access Key ID"
      description: "AWS IAM Access Key"
      required: true
    - variable: "aws_secret_key"
      label: "AWS Secret Access Key"
      description: "AWS IAM Secret Key"
      required: true
    - variable: "influx_url"
      type: "string"
      required: true
      label: "InfluxDB URL"
      description: URL for InfluxDB to send metrics to
      default: http://influx_aws.pfmtest.com:80
    - variable: "influx_db_name"
      type: "string"
      required: true
      label: "InfluxDB Database Name"
      description: The database in InfluxDB to send metrics to
      default: aws
cloudwatch-telegraf:
  scale: 1
  metadata:
    config: *cloudwatch-telegraf
cloudwatch-telegraf-conf:
  metadata:
    config: &cloudwatch-telegraf
      telegraf:
        path: /config/telegraf/telegraf.conf
        content: |
          # Telegraf configuration

          # Telegraf is entirely plugin driven. All metrics are gathered from the
          # declared inputs, and sent to the declared outputs.

          # Plugins must be declared in here to be active.
          # To deactivate a plugin, comment out the name and any variables.

          # Use 'telegraf -config telegraf.conf -test' to see what metrics a config
          # file would generate.

          # Global tags can be specified here in key="value" format.
          [tags]
            # dc = "us-east-1" # will tag all metrics with dc=us-east-1
            # rack = "1a"

          # Configuration for telegraf agent
          [agent]
            # Default data collection interval for all inputs
            interval = "10s"
            # Rounds collection interval to 'interval'
            # ie, if interval="10s" then always collect on :00, :10, :20, etc.
            round_interval = true

            # Telegraf will cache metric_buffer_limit metrics for each output, and will
            # flush this buffer on a successful write.
            metric_buffer_limit = 10000

            # Collection jitter is used to jitter the collection by a random amount.
            # Each plugin will sleep for a random time within jitter before collecting.
            # This can be used to avoid many plugins querying things like sysfs at the
            # same time, which can have a measurable effect on the system.
            collection_jitter = "0s"

            # Default data flushing interval for all outputs. You should not set this below
            # interval. Maximum flush_interval will be flush_interval + flush_jitter
            flush_interval = "10s"
            # Jitter the flush interval by a random amount. This is primarily to avoid
            # large write spikes for users running a large number of telegraf instances.
            # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
            flush_jitter = "0s"

            # Run telegraf in debug mode
            debug = false
            # Run telegraf in quiet mode
            quiet = false
            # Override default hostname, if empty use os.Hostname()
            hostname = ""


          ###############################################################################
          #                                  OUTPUTS                                    #
          ###############################################################################


          # Configuration for influxdb server to send metrics to
          [[outputs.influxdb]]
            ### The full HTTP or UDP endpoint URL for your InfluxDB instance.
            ### Multiple urls can be specified but it is assumed that they are part of the same
            ### cluster, this means that only ONE of the urls will be written to each interval.
            # urls = ["udp://localhost:8089"] # UDP endpoint example
            urls = ["${influx_url}"] # required
            ### The target database for metrics (telegraf will create it if not exists)
            database = "${influx_db_name}" # required
            ### Precision of writes, valid values are n, u, ms, s, m, and h
            ### note: using second precision greatly helps InfluxDB compression
            precision = "s"

            ### Connection timeout (for the connection with InfluxDB), formatted as a string.
            ### If not provided, will default to 0 (no timeout)
            # timeout = "5s"
            # username = "telegraf"
            # password = "metricsmetricsmetricsmetrics"
            ### Set the user agent for HTTP POSTs (can be useful for log differentiation)
            # user_agent = "telegraf"
            ### Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
            # udp_payload = 512


          ###############################################################################
          #                                  INPUTS                                     #
          ###############################################################################

          [[inputs.cloudwatch]]
            tagexclude = ["host"]
            ## Amazon Region (required)
            region = '${aws_region}'
            cache_ttl = '5m'

            ## Requested CloudWatch aggregation Period (required - must be a multiple of 60s)
            period = '1m'

            ## Collection Delay (required - must account for metrics availability via CloudWatch API)
            delay = '1m'

            ## Override global run interval (optional - defaults to global interval)
            ## Recomended: use metric 'interval' that is a multiple of 'period' to avoid
            ## gaps or overlap in pulled data
            interval = '1m'

            ## Metric Statistic Namespace (required)
            namespace = 'AWS/ELB'

            [[inputs.cloudwatch.metrics]]
              names = ['Latency', 'RequestCount']
              [[inputs.cloudwatch.metrics.dimensions]]
                name = "LoadBalancerName"
              [[inputs.cloudwatch.metrics.dimensions]]
                name = "AvailabilityZone"
